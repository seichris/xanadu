{"ast":null,"code":"const SHA3 = require('keccakjs');\n\nconst secp256k1 = require('secp256k1');\n\nconst assert = require('assert');\n\nconst rlp = require('rlp');\n\nconst BN = require('bn.js');\n\nconst createHash = require('create-hash');\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\n\n\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\n\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n/**\n * SHA3-256 hash of null (a ```String```)\n * @var {String} SHA3_NULL_S\n */\n\nexports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * SHA3-256 hash of null (a ```Buffer```)\n * @var {Buffer} SHA3_NULL\n */\n\nexports.SHA3_NULL = new Buffer(exports.SHA3_NULL_S, 'hex');\n/**\n * SHA3-256 of an RLP of an empty array (a ```String```)\n * @var {String} SHA3_RLP_ARRAY_S\n */\n\nexports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * SHA3-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} SHA3_RLP_ARRAY\n */\n\nexports.SHA3_RLP_ARRAY = new Buffer(exports.SHA3_RLP_ARRAY_S, 'hex');\n/**\n * SHA3-256 hash of the RLP of null  (a ```String```)\n * @var {String} SHA3_RLP_S\n */\n\nexports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * SHA3-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} SHA3_RLP\n */\n\nexports.SHA3_RLP = new Buffer(exports.SHA3_RLP_S, 'hex');\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\n\nexports.BN = BN;\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\n\nexports.rlp = rlp;\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\n\nexports.secp256k1 = secp256k1;\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\n\nexports.zeros = function (bytes) {\n  var buf = new Buffer(bytes);\n  buf.fill(0);\n  return buf;\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\n\n\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\n\n\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @method unpad\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\n\n\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a);\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @method toBuffer\n * @param {*} v the value\n */\n\n\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = new Buffer(v);\n    } else if (typeof v === 'string') {\n      if (exports.isHexPrefixed(v)) {\n        v = new Buffer(exports.padToEven(exports.stripHexPrefix(v)), 'hex');\n      } else {\n        v = new Buffer(v);\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = new Buffer([]);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = new Buffer(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n};\n/**\n * Converts a `Number` into a hex `String`\n * @method intToHex\n * @param {Number} i\n * @return {String}\n */\n\n\nexports.intToHex = function (i) {\n  assert(i % 1 === 0, 'number is not a integer');\n  assert(i >= 0, 'number must be positive');\n  var hex = i.toString(16);\n\n  if (hex.length % 2) {\n    hex = '0' + hex;\n  }\n\n  return '0x' + hex;\n};\n/**\n * Converts an `Number` to a `Buffer`\n * @method intToBuffer\n * @param {Number} i\n * @return {Buffer}\n */\n\n\nexports.intToBuffer = function (i) {\n  var hex = exports.intToHex(i);\n  return new Buffer(hex.slice(2), 'hex');\n};\n/**\n * Converts a `Buffer` to a `Number`\n * @method bufferToInt\n * @param {Buffer} buf\n * @return {Number}\n */\n\n\nexports.bufferToInt = function (buf) {\n  return parseInt(exports.bufferToHex(buf), 16);\n};\n/**\n * Converts a `Buffer` into a hex `String`\n * @method bufferToHex\n * @param {Buffer} buf\n * @return {String}\n */\n\n\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n\n  if (buf.length === 0) {\n    return 0;\n  }\n\n  return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @method fromSigned\n * @param {Buffer} num\n * @return {BN}\n */\n\n\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @method toUnsigned\n * @param {BN} num\n * @return {Buffer}\n */\n\n\nexports.toUnsigned = function (num) {\n  return new Buffer(num.toTwos(256).toArray());\n};\n/**\n * Creates SHA-3 hash of the input\n * @method sha3\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bytes=256] the SHA width\n * @return {Buffer}\n */\n\n\nexports.sha3 = function (a, bytes) {\n  a = exports.toBuffer(a);\n  if (!bytes) bytes = 256;\n  var h = new SHA3(bytes);\n\n  if (a) {\n    h.update(a);\n  }\n\n  return new Buffer(h.digest('hex'), 'hex');\n};\n/**\n * Creates SHA256 hash of the input\n * @method sha256\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\n\n\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input\n * @method ripemd160\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return exports.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @method rlphash\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\n\n\nexports.rlphash = function (a) {\n  return exports.sha3(rlp.encode(a));\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @method isValidPrivate\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\n\n\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @method isValidPublic\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\n\n\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([new Buffer([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @method publicToAddress\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\n\n\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey);\n\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n  }\n\n  assert(pubKey.length === 64); // Only take the lower 160bits of the hash\n\n  return exports.sha3(pubKey).slice(-20);\n};\n/**\n * Returns the ethereum public key of a given private key\n * @method privateToPublic\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\n\n\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey); // skip the type flag and use the X, Y points\n\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n * @method importPublic\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\n\n\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey);\n\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n  }\n\n  return publicKey;\n};\n/**\n * ECDSA sign\n * @method ecsign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\n\n\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n  var ret = {};\n  ret.r = sig.signature.slice(0, 32);\n  ret.s = sig.signature.slice(32, 64);\n  ret.v = sig.recovery + 27;\n  return ret;\n};\n/**\n * ECDSA public key recovery from signature\n * @method ecrecover\n * @param {Buffer} msgHash\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);\n  var recovery = exports.bufferToInt(v) - 27;\n\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @method toRpcSig\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\n\n\nexports.toRpcSig = function (v, r, s) {\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([r, s, exports.toBuffer(v - 27)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * @method fromRpcSig\n * @param {String} sig\n * @return {Object}\n */\n\n\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig);\n  var v = sig[64]; // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  };\n};\n/**\n * Returns the ethereum address of a given private key\n * @method privateToAddress\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\n\n\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @method isValidAddress\n * @param {String} address\n * @return {Boolean}\n */\n\n\nexports.isValidAddress = function (address) {\n  return /^0x[0-9a-fA-F]{40}$/i.test(address);\n};\n/**\n * Returns a checksummed address\n * @method toChecksumAddress\n * @param {String} address\n * @return {String}\n */\n\n\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase();\n  var hash = exports.sha3(address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n/**\n * Checks if the address is a valid checksummed address\n * @method isValidChecksumAddress\n * @param {Buffer} address\n * @return {Boolean}\n */\n\n\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;\n};\n/**\n * Generates an address of a newly created contract\n * @method generateAddress\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\n\n\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from);\n  nonce = new BN(nonce);\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null;\n  } else {\n    nonce = new Buffer(nonce.toArray());\n  } // Only take the lower 160bits of the hash\n\n\n  return exports.rlphash([from, nonce]).slice(-20);\n};\n/**\n * Returns true if the supplied address belongs to a precompiled account\n * @method isPrecompiled\n * @param {Buffer|String} address\n * @return {Boolean}\n */\n\n\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address);\n  return a.length === 1 && a[0] > 0 && a[0] < 5;\n};\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with \"0x\"\n * @method isHexPrefixed\n * @param {String} str\n * @return {Boolean}\n */\n\n\nexports.isHexPrefixed = function (str) {\n  return str.slice(0, 2) === '0x';\n};\n/**\n * Removes \"0x\" from a given `String`\n * @method stripHexPrefix\n * @param {String} str\n * @return {String}\n */\n\n\nexports.stripHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @method addHexPrefix\n * @param {String} str\n * @return {String}\n */\n\n\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Pads a `String` to have an even length\n * @method padToEven\n * @param {String} a\n * @return {String}\n */\n\n\nexports.padToEven = function (a) {\n  if (a.length % 2) a = '0' + a;\n  return a;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @method BAToJSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\n\n\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n\n    return array;\n  }\n};\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @method defineProperties\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\n\n\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {};\n\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex');\n      });\n\n      return obj;\n    }\n\n    return exports.baToJSON(this.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = exports.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = new Buffer([]);\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v);\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = new Buffer(exports.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d);\n      });\n    } else if (typeof data === 'object') {\n      for (var prop in data) {\n        if (self._fields.indexOf(prop) !== -1) {\n          self[prop] = data[prop];\n        }\n      }\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/chris/Documents/Workspace/xanadu-contracts/scaffold-eth/node_modules/burner-provider/node_modules/ethereumjs-abi/node_modules/ethereumjs-util/index.js"],"names":["SHA3","require","secp256k1","assert","rlp","BN","createHash","exports","MAX_INTEGER","TWO_POW256","SHA3_NULL_S","SHA3_NULL","Buffer","SHA3_RLP_ARRAY_S","SHA3_RLP_ARRAY","SHA3_RLP_S","SHA3_RLP","zeros","bytes","buf","fill","setLengthLeft","setLength","msg","length","right","toBuffer","copy","slice","setLengthRight","unpad","stripZeros","a","stripHexPrefix","first","toString","v","isBuffer","Array","isArray","isHexPrefixed","padToEven","intToBuffer","undefined","toArray","Error","intToHex","i","hex","bufferToInt","parseInt","bufferToHex","fromSigned","num","fromTwos","toUnsigned","toTwos","sha3","h","update","digest","sha256","ripemd160","padded","hash","rlphash","encode","isValidPrivate","privateKey","privateKeyVerify","isValidPublic","publicKey","sanitize","publicKeyVerify","concat","pubToAddress","publicToAddress","pubKey","publicKeyConvert","privateToPublic","publicKeyCreate","importPublic","ecsign","msgHash","sig","sign","ret","r","signature","s","recovery","ecrecover","senderPubKey","recover","toRpcSig","fromRpcSig","privateToAddress","isValidAddress","address","test","toChecksumAddress","toLowerCase","toUpperCase","isValidChecksumAddress","generateAddress","from","nonce","isZero","isPrecompiled","str","addHexPrefix","baToJSON","ba","array","push","defineProperties","self","fields","data","raw","_fields","toJSON","label","obj","forEach","field","serialize","name","getter","setter","allowZero","allowLess","Object","defineProperty","enumerable","configurable","get","set","default","alias","decode","d","prop","indexOf"],"mappings":"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","sourcesContent":["const SHA3 = require('keccakjs')\nconst secp256k1 = require('secp256k1')\nconst assert = require('assert')\nconst rlp = require('rlp')\nconst BN = require('bn.js')\nconst createHash = require('create-hash')\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16)\n\n/**\n * SHA3-256 hash of null (a ```String```)\n * @var {String} SHA3_NULL_S\n */\nexports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * SHA3-256 hash of null (a ```Buffer```)\n * @var {Buffer} SHA3_NULL\n */\nexports.SHA3_NULL = new Buffer(exports.SHA3_NULL_S, 'hex')\n\n/**\n * SHA3-256 of an RLP of an empty array (a ```String```)\n * @var {String} SHA3_RLP_ARRAY_S\n */\nexports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * SHA3-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} SHA3_RLP_ARRAY\n */\nexports.SHA3_RLP_ARRAY = new Buffer(exports.SHA3_RLP_ARRAY_S, 'hex')\n\n/**\n * SHA3-256 hash of the RLP of null  (a ```String```)\n * @var {String} SHA3_RLP_S\n */\nexports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * SHA3-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} SHA3_RLP\n */\nexports.SHA3_RLP = new Buffer(exports.SHA3_RLP_S, 'hex')\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  var buf = new Buffer(bytes)\n  buf.fill(0)\n  return buf\n}\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length)\n  msg = exports.toBuffer(msg)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @method unpad\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a)\n  var first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @method toBuffer\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = new Buffer(v)\n    } else if (typeof v === 'string') {\n      if (exports.isHexPrefixed(v)) {\n        v = new Buffer(exports.padToEven(exports.stripHexPrefix(v)), 'hex')\n      } else {\n        v = new Buffer(v)\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v)\n    } else if (v === null || v === undefined) {\n      v = new Buffer([])\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = new Buffer(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @method intToHex\n * @param {Number} i\n * @return {String}\n */\nexports.intToHex = function (i) {\n  assert(i % 1 === 0, 'number is not a integer')\n  assert(i >= 0, 'number must be positive')\n  var hex = i.toString(16)\n  if (hex.length % 2) {\n    hex = '0' + hex\n  }\n\n  return '0x' + hex\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @method intToBuffer\n * @param {Number} i\n * @return {Buffer}\n */\nexports.intToBuffer = function (i) {\n  var hex = exports.intToHex(i)\n  return new Buffer(hex.slice(2), 'hex')\n}\n\n/**\n * Converts a `Buffer` to a `Number`\n * @method bufferToInt\n * @param {Buffer} buf\n * @return {Number}\n */\nexports.bufferToInt = function (buf) {\n  return parseInt(exports.bufferToHex(buf), 16)\n}\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @method bufferToHex\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf)\n  if (buf.length === 0) {\n    return 0\n  }\n\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @method fromSigned\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256)\n}\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @method toUnsigned\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return new Buffer(num.toTwos(256).toArray())\n}\n\n/**\n * Creates SHA-3 hash of the input\n * @method sha3\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bytes=256] the SHA width\n * @return {Buffer}\n */\nexports.sha3 = function (a, bytes) {\n  a = exports.toBuffer(a)\n  if (!bytes) bytes = 256\n\n  var h = new SHA3(bytes)\n  if (a) {\n    h.update(a)\n  }\n  return new Buffer(h.digest('hex'), 'hex')\n}\n\n/**\n * Creates SHA256 hash of the input\n * @method sha256\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a)\n  return createHash('sha256').update(a).digest()\n}\n\n/**\n * Creates RIPEMD160 hash of the input\n * @method ripemd160\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a)\n  var hash = createHash('rmd160').update(a).digest()\n  if (padded === true) {\n    return exports.setLength(hash, 32)\n  } else {\n    return hash\n  }\n}\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @method rlphash\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.sha3(rlp.encode(a))\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @method isValidPrivate\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @method isValidPublic\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([ new Buffer([4]), publicKey ]))\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  return secp256k1.publicKeyVerify(publicKey)\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @method publicToAddress\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey)\n  if (sanitize && (pubKey.length !== 64)) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1)\n  }\n  assert(pubKey.length === 64)\n  // Only take the lower 160bits of the hash\n  return exports.sha3(pubKey).slice(-20)\n}\n\n/**\n * Returns the ethereum public key of a given private key\n * @method privateToPublic\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey)\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1)\n}\n\n/**\n * Converts a public key to the Ethereum format.\n * @method importPublic\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1)\n  }\n  return publicKey\n}\n\n/**\n * ECDSA sign\n * @method ecsign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey)\n\n  var ret = {}\n  ret.r = sig.signature.slice(0, 32)\n  ret.s = sig.signature.slice(32, 64)\n  ret.v = sig.recovery + 27\n  return ret\n}\n\n/**\n * ECDSA public key recovery from signature\n * @method ecrecover\n * @param {Buffer} msgHash\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)\n  var recovery = exports.bufferToInt(v) - 27\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value')\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery)\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @method toRpcSig\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([ r, s, exports.toBuffer(v - 27) ]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * @method fromRpcSig\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig)\n\n  var v = sig[64]\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  }\n}\n\n/**\n * Returns the ethereum address of a given private key\n * @method privateToAddress\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @method isValidAddress\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return /^0x[0-9a-fA-F]{40}$/i.test(address)\n}\n\n/**\n * Returns a checksummed address\n * @method toChecksumAddress\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase()\n  var hash = exports.sha3(address).toString('hex')\n  var ret = '0x'\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address\n * @method isValidChecksumAddress\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && (exports.toChecksumAddress(address) === address)\n}\n\n/**\n * Generates an address of a newly created contract\n * @method generateAddress\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from)\n  nonce = new BN(nonce)\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null\n  } else {\n    nonce = new Buffer(nonce.toArray())\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20)\n}\n\n/**\n * Returns true if the supplied address belongs to a precompiled account\n * @method isPrecompiled\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address)\n  return a.length === 1 && a[0] > 0 && a[0] < 5\n}\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with \"0x\"\n * @method isHexPrefixed\n * @param {String} str\n * @return {Boolean}\n */\nexports.isHexPrefixed = function (str) {\n  return str.slice(0, 2) === '0x'\n}\n\n/**\n * Removes \"0x\" from a given `String`\n * @method stripHexPrefix\n * @param {String} str\n * @return {String}\n */\nexports.stripHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return exports.isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @method addHexPrefix\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Pads a `String` to have an even length\n * @method padToEven\n * @param {String} a\n * @return {String}\n */\nexports.padToEven = function (a) {\n  if (a.length % 2) a = '0' + a\n  return a\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @method BAToJSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex')\n  } else if (ba instanceof Array) {\n    var array = []\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @method defineProperties\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = []\n  self._fields = []\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {}\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex')\n      })\n      return obj\n    }\n    return exports.baToJSON(this.raw)\n  }\n\n  self.serialize = function serialize () {\n    return rlp.encode(self.raw)\n  }\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name)\n    function getter () {\n      return self.raw[i]\n    }\n    function setter (v) {\n      v = exports.toBuffer(v)\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = new Buffer([])\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v)\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes')\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length)\n      }\n\n      self.raw[i] = v\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    })\n\n    if (field.default) {\n      self[field.name] = field.default\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      })\n    }\n  })\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = new Buffer(exports.stripHexPrefix(data), 'hex')\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data)\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw (new Error('wrong number of fields in data'))\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d)\n      })\n    } else if (typeof data === 'object') {\n      for (var prop in data) {\n        if (self._fields.indexOf(prop) !== -1) {\n          self[prop] = data[prop]\n        }\n      }\n    } else {\n      throw new Error('invalid data')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}