{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Documents\\\\Workspace\\\\xanadu-contracts\\\\scaffold-eth\\\\packages\\\\react-app\\\\src\\\\components\\\\Balance.js\";\nimport React, { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { usePoller } from \"../hooks\";\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n  usePoller(async () => {\n    if (props.address && props.provider) {\n      try {\n        const newBalance = await props.provider.getBalance(props.address);\n        setBalance(newBalance);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, props.pollTime ? props.pollTime : 1999);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance != \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (usingBalance) {\n    let etherBalance = ethers.utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  if (props.dollarMultiplier && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * props.dollarMultiplier).toFixed(2);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: 24,\n      padding: 8,\n      cursor: 'pointer'\n    },\n    onClick: () => {\n      setDollarMode(!dollarMode);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, displayBalance);\n}","map":{"version":3,"sources":["C:/Users/chris/Documents/Workspace/xanadu-contracts/scaffold-eth/packages/react-app/src/components/Balance.js"],"names":["React","useState","ethers","usePoller","Balance","props","dollarMode","setDollarMode","balance","setBalance","address","provider","newBalance","getBalance","e","console","log","pollTime","floatBalance","parseFloat","usingBalance","etherBalance","utils","formatEther","toFixed","displayBalance","dollarMultiplier","verticalAlign","fontSize","padding","cursor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAErC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACAE,EAAAA,SAAS,CAAC,YAAU;AAClB,QAAGE,KAAK,CAACK,OAAN,IAAiBL,KAAK,CAACM,QAA1B,EAAmC;AACjC,UAAG;AACD,cAAMC,UAAU,GAAG,MAAMP,KAAK,CAACM,QAAN,CAAeE,UAAf,CAA0BR,KAAK,CAACK,OAAhC,CAAzB;AACAD,QAAAA,UAAU,CAACG,UAAD,CAAV;AACD,OAHD,CAGC,OAAME,CAAN,EAAQ;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GATQ,EASPT,KAAK,CAACY,QAAN,GAAeZ,KAAK,CAACY,QAArB,GAA8B,IATvB,CAAT;AAWA,MAAIC,YAAY,GAAGC,UAAU,CAAC,MAAD,CAA7B;AAEA,MAAIC,YAAY,GAAGZ,OAAnB;;AAEA,MAAG,OAAOH,KAAK,CAACG,OAAb,IAAwB,WAA3B,EAAuC;AACrCY,IAAAA,YAAY,GAAGf,KAAK,CAACG,OAArB;AACD;;AAED,MAAGY,YAAH,EAAgB;AACd,QAAIC,YAAY,GAAGnB,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBH,YAAzB,CAAnB;AACAD,IAAAA,UAAU,CAACE,YAAD,CAAV,CAAyBG,OAAzB,CAAiC,CAAjC;AACAN,IAAAA,YAAY,GAAGC,UAAU,CAACE,YAAD,CAAzB;AACD;;AAED,MAAII,cAAc,GAAGP,YAAY,CAACM,OAAb,CAAqB,CAArB,CAArB;;AAEA,MAAGnB,KAAK,CAACqB,gBAAN,IAA0BpB,UAA7B,EAAwC;AACtCmB,IAAAA,cAAc,GAAG,MAAI,CAACP,YAAY,GAACb,KAAK,CAACqB,gBAApB,EAAsCF,OAAtC,CAA8C,CAA9C,CAArB;AACD;;AAED,sBACE;AAAM,IAAA,KAAK,EAAE;AAACG,MAAAA,aAAa,EAAC,QAAf;AAAwBC,MAAAA,QAAQ,EAAC,EAAjC;AAAoCC,MAAAA,OAAO,EAAC,CAA5C;AAA8CC,MAAAA,MAAM,EAAC;AAArD,KAAb;AAA8E,IAAA,OAAO,EAAE,MAAI;AAACvB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AAA2B,KAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmB,cADH,CADF;AAKD","sourcesContent":["import React, { useState } from 'react'\r\nimport { ethers } from \"ethers\";\r\nimport { usePoller } from \"../hooks\";\r\n\r\nexport default function Balance(props) {\r\n\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n  const [balance, setBalance] = useState();\r\n  usePoller(async ()=>{\r\n    if(props.address && props.provider){\r\n      try{\r\n        const newBalance = await props.provider.getBalance(props.address)\r\n        setBalance(newBalance)\r\n      }catch(e){\r\n        console.log(e)\r\n      }\r\n    }\r\n  },props.pollTime?props.pollTime:1999)\r\n\r\n  let floatBalance = parseFloat(\"0.00\")\r\n\r\n  let usingBalance = balance\r\n\r\n  if(typeof props.balance != \"undefined\"){\r\n    usingBalance = props.balance\r\n  }\r\n\r\n  if(usingBalance){\r\n    let etherBalance = ethers.utils.formatEther(usingBalance)\r\n    parseFloat(etherBalance).toFixed(2)\r\n    floatBalance = parseFloat(etherBalance)\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4)\r\n\r\n  if(props.dollarMultiplier && dollarMode){\r\n    displayBalance = \"$\"+(floatBalance*props.dollarMultiplier).toFixed(2)\r\n  }\r\n\r\n  return (\r\n    <span style={{verticalAlign:\"middle\",fontSize:24,padding:8,cursor:'pointer'}} onClick={()=>{setDollarMode(!dollarMode)}}>\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}