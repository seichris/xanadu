{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n  useEffect(() => {\n    if (typeof provider != \"undefined\" && typeof startBlock != \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          setUpdates(messages => [...messages, args.pop().args]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, contracts, contractName, eventName]);\n  return updates;\n}","map":{"version":3,"sources":["C:/Users/chris/Documents/Workspace/xanadu-contracts/scaffold-eth/packages/react-app/src/hooks/EventListener.js"],"names":["useState","useEffect","useEventListener","contracts","contractName","eventName","provider","startBlock","args","updates","setUpdates","resetEventsBlock","on","messages","pop","removeListener","e","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAoCC,YAApC,EAAiDC,SAAjD,EAA2DC,QAA3D,EAAoEC,UAApE,EAA+EC,IAA/E,EAAqF;AAElG,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBV,QAAQ,CAAC,EAAD,CAArC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAG,OAAOK,QAAP,IAAmB,WAAnB,IAAgC,OAAOC,UAAP,IAAqB,WAAxD,EAAoE;AAClE;AACAD,MAAAA,QAAQ,CAACK,gBAAT,CAA0BJ,UAA1B;AACD;;AACD,QAAGJ,SAAS,IAAIC,YAAb,IAA6BD,SAAS,CAACC,YAAD,CAAzC,EAAwD;AACtD,UAAG;AACDD,QAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBQ,EAAxB,CAA2BP,SAA3B,EAAsC,CAAC,GAAGG,IAAJ,KAAa;AACjDE,UAAAA,UAAU,CAACG,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAeL,IAAI,CAACM,GAAL,EAAD,CAAaN,IAA3B,CAAb,CAAV;AACD,SAFD;AAGA,eAAO,MAAI;AACTL,UAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBW,cAAxB,CAAuCV,SAAvC;AACD,SAFD;AAGD,OAPD,CAOC,OAAMW,CAAN,EAAQ;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GAjBQ,EAiBP,CAACV,QAAD,EAAUH,SAAV,EAAoBC,YAApB,EAAiCC,SAAjC,CAjBO,CAAT;AAmBA,SAAOI,OAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport default function useEventListener(contracts,contractName,eventName,provider,startBlock,args) {\r\n\r\n  const [updates,setUpdates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(typeof provider != \"undefined\"&&typeof startBlock != \"undefined\"){\r\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\r\n      provider.resetEventsBlock(startBlock)\r\n    }\r\n    if(contracts && contractName && contracts[contractName]){\r\n      try{\r\n        contracts[contractName].on(eventName, (...args) => {\r\n          setUpdates(messages => [...messages, (args.pop()).args]) \r\n        });\r\n        return ()=>{\r\n          contracts[contractName].removeListener(eventName)\r\n        }\r\n      }catch(e){\r\n        console.log(e)\r\n      }\r\n    }\r\n  },[provider,contracts,contractName,eventName])\r\n\r\n  return updates;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}