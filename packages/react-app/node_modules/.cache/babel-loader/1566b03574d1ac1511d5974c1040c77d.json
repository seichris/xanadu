{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { useState, useEffect } from 'react';\nexport default function useContractLoader(provider) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider != \"undefined\") {\n        try {\n          let contractList = require(\"../contracts/contracts.js\");\n\n          let newContracts = []; //we need to check to see if this provider has a signer or not\n\n          let signer;\n          let accounts = await provider.listAccounts();\n\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          for (let c in contractList) {\n            newContracts[contractList[c]] = new ethers.Contract(require(\"../contracts/\" + contractList[c] + \".address.js\"), require(\"../contracts/\" + contractList[c] + \".abi.js\"), signer);\n\n            try {\n              newContracts[contractList[c]].bytecode = require(\"../contracts/\" + contractList[c] + \".bytecode.js\");\n            } catch (e) {\n              console.log(e);\n            }\n          }\n\n          setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n\n    loadContract();\n  }, [provider]);\n  return contracts;\n}","map":{"version":3,"sources":["C:/Users/chris/Documents/Workspace/xanadu-contracts/scaffold-eth/packages/react-app/src/hooks/ContractLoader.js"],"names":["ethers","useState","useEffect","useContractLoader","provider","contracts","setContracts","loadContract","contractList","require","newContracts","signer","accounts","listAccounts","length","getSigner","c","Contract","bytecode","e","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AAClD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,EAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeK,YAAf,GAA8B;AAC5B,UAAG,OAAOH,QAAP,IAAmB,WAAtB,EACA;AACE,YAAG;AACD,cAAII,YAAY,GAAGC,OAAO,CAAC,2BAAD,CAA1B;;AACA,cAAIC,YAAY,GAAG,EAAnB,CAFC,CAID;;AACA,cAAIC,MAAJ;AACA,cAAIC,QAAQ,GAAG,MAAMR,QAAQ,CAACS,YAAT,EAArB;;AACA,cAAGD,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAgB,CAA/B,EAAiC;AAC/BH,YAAAA,MAAM,GAAGP,QAAQ,CAACW,SAAT,EAAT;AACD,WAFD,MAEK;AACHJ,YAAAA,MAAM,GAAGP,QAAT;AACD;;AAED,eAAI,IAAIY,CAAR,IAAaR,YAAb,EAA0B;AACxBE,YAAAA,YAAY,CAACF,YAAY,CAACQ,CAAD,CAAb,CAAZ,GAAgC,IAAIhB,MAAM,CAACiB,QAAX,CAC9BR,OAAO,CAAC,kBAAgBD,YAAY,CAACQ,CAAD,CAA5B,GAAgC,aAAjC,CADuB,EAE9BP,OAAO,CAAC,kBAAgBD,YAAY,CAACQ,CAAD,CAA5B,GAAgC,SAAjC,CAFuB,EAG9BL,MAH8B,CAAhC;;AAKA,gBAAG;AACDD,cAAAA,YAAY,CAACF,YAAY,CAACQ,CAAD,CAAb,CAAZ,CAA8BE,QAA9B,GAAyCT,OAAO,CAAC,kBAAgBD,YAAY,CAACQ,CAAD,CAA5B,GAAgC,cAAjC,CAAhD;AACD,aAFD,CAEC,OAAMG,CAAN,EAAQ;AACPC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AACDb,UAAAA,YAAY,CAACI,YAAD,CAAZ;AACD,SA1BD,CA0BC,OAAMS,CAAN,EAAQ;AACPC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCF,CAAxC;AACD;AACF;AACF;;AACDZ,IAAAA,YAAY;AACb,GApCQ,EAoCP,CAACH,QAAD,CApCO,CAAT;AAqCA,SAAOC,SAAP;AACD","sourcesContent":["import { ethers } from \"ethers\";\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport default function useContractLoader(provider) {\r\n  const [contracts, setContracts] = useState();\r\n  useEffect(() => {\r\n    async function loadContract() {\r\n      if(typeof provider != \"undefined\")\r\n      {\r\n        try{\r\n          let contractList = require(\"../contracts/contracts.js\")\r\n          let newContracts = []\r\n\r\n          //we need to check to see if this provider has a signer or not\r\n          let signer\r\n          let accounts = await provider.listAccounts()\r\n          if(accounts && accounts.length>0){\r\n            signer = provider.getSigner()\r\n          }else{\r\n            signer = provider\r\n          }\r\n\r\n          for(let c in contractList){\r\n            newContracts[contractList[c]] = new ethers.Contract(\r\n              require(\"../contracts/\"+contractList[c]+\".address.js\"),\r\n              require(\"../contracts/\"+contractList[c]+\".abi.js\"),\r\n              signer,\r\n            );\r\n            try{\r\n              newContracts[contractList[c]].bytecode = require(\"../contracts/\"+contractList[c]+\".bytecode.js\")\r\n            }catch(e){\r\n              console.log(e)\r\n            }\r\n          }\r\n          setContracts(newContracts)\r\n        }catch(e){\r\n          console.log(\"ERROR LOADING CONTRACTS!!\",e)\r\n        }\r\n      }\r\n    }\r\n    loadContract()\r\n  },[provider])\r\n  return contracts\r\n}\r\n"]},"metadata":{},"sourceType":"module"}