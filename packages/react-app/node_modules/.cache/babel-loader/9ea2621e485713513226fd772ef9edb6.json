{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { usePoller } from \".\";\nconst DEBUG = false;\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 3777;\n\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args == \"number\") {\n    //it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (typeof onChange == \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value]);\n  usePoller(async () => {\n    if (contracts && contracts[contractName]) {\n      try {\n        let newValue;\n        if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n\n        if (args && args.length > 0) {\n          newValue = await contracts[contractName][functionName](...args);\n          if (DEBUG) console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n        } else {\n          newValue = await contracts[contractName][functionName]();\n        }\n\n        if (formatter && typeof formatter == \"function\") {\n          newValue = formatter(newValue);\n        } //console.log(\"GOT VALUE\",newValue)\n\n\n        if (newValue != value) {\n          setValue(newValue);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, adjustPollTime);\n  return value;\n}","map":{"version":3,"sources":["C:/Users/chris/Documents/Workspace/xanadu-contracts/scaffold-eth/packages/react-app/src/hooks/ContractReader.js"],"names":["useState","useEffect","ethers","usePoller","DEBUG","useContractReader","contracts","contractName","functionName","args","pollTime","formatter","onChange","adjustPollTime","value","setValue","setTimeout","bind","newValue","console","log","length","e"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,GAA1B;AAEA,MAAMC,KAAK,GAAG,KAAd;AAEA,eAAe,SAASC,iBAAT,CAA2BC,SAA3B,EAAqCC,YAArC,EAAkDC,YAAlD,EAA+DC,IAA/D,EAAoEC,QAApE,EAA6EC,SAA7E,EAAuFC,QAAvF,EAAiG;AAE9G,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAGH,QAAH,EAAY;AACVG,IAAAA,cAAc,GAAGH,QAAjB;AACD,GAFD,MAEO,IAAG,CAACA,QAAD,IAAa,OAAOD,IAAP,IAAe,QAA/B,EAAwC;AAC7C;AACAI,IAAAA,cAAc,GAAGJ,IAAjB;AACD;;AAED,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,EAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAG,OAAOW,QAAP,IAAmB,UAAtB,EAAiC;AAC/BI,MAAAA,UAAU,CAACJ,QAAQ,CAACK,IAAT,CAAc,IAAd,EAAmBH,KAAnB,CAAD,EAA2B,CAA3B,CAAV;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,YAAU;AAClB,QAAGG,SAAS,IAAIA,SAAS,CAACC,YAAD,CAAzB,EAAwC;AACtC,UAAG;AACD,YAAIW,QAAJ;AACA,YAAGd,KAAH,EAAUe,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBb,YAAvB,EAAoCC,YAApC,EAAkD,WAAlD,EAA+DC,IAA/D;;AACV,YAAGA,IAAI,IAAEA,IAAI,CAACY,MAAL,GAAc,CAAvB,EAAyB;AACvBH,UAAAA,QAAQ,GAAG,MAAMZ,SAAS,CAACC,YAAD,CAAT,CAAwBC,YAAxB,EAAsC,GAAGC,IAAzC,CAAjB;AACA,cAAGL,KAAH,EAAUe,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2Bb,YAA3B,EAAwC,cAAxC,EAAuDC,YAAvD,EAAoE,MAApE,EAA2EC,IAA3E,EAAgF,SAAhF,EAA0FS,QAA1F;AACX,SAHD,MAGK;AACHA,UAAAA,QAAQ,GAAG,MAAMZ,SAAS,CAACC,YAAD,CAAT,CAAwBC,YAAxB,GAAjB;AACD;;AACD,YAAGG,SAAS,IAAI,OAAOA,SAAP,IAAoB,UAApC,EAA+C;AAC7CO,UAAAA,QAAQ,GAAGP,SAAS,CAACO,QAAD,CAApB;AACD,SAXA,CAYD;;;AACA,YAAGA,QAAQ,IAAEJ,KAAb,EAAmB;AACjBC,UAAAA,QAAQ,CAACG,QAAD,CAAR;AACD;AACF,OAhBD,CAgBC,OAAMI,CAAN,EAAQ;AACPH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF;AACF,GAtBQ,EAsBPT,cAtBO,CAAT;AAwBA,SAAOC,KAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { usePoller } from \".\";\r\n\r\nconst DEBUG = false\r\n\r\nexport default function useContractReader(contracts,contractName,functionName,args,pollTime,formatter,onChange) {\r\n\r\n  let adjustPollTime = 3777\r\n  if(pollTime){\r\n    adjustPollTime = pollTime\r\n  } else if(!pollTime && typeof args == \"number\"){\r\n    //it's okay to pass poll time as last argument without args for the call\r\n    adjustPollTime = args\r\n  }\r\n\r\n  const [value, setValue] = useState()\r\n  useEffect(() => {\r\n    if(typeof onChange == \"function\"){\r\n      setTimeout(onChange.bind(this,value),1)\r\n    }\r\n  }, [value]);\r\n\r\n  usePoller(async ()=>{\r\n    if(contracts && contracts[contractName]){\r\n      try{\r\n        let newValue\r\n        if(DEBUG) console.log(\"CALLING \",contractName,functionName, \"with args\", args)\r\n        if(args&&args.length > 0){\r\n          newValue = await contracts[contractName][functionName](...args)\r\n          if(DEBUG) console.log(\"contractName\",contractName,\"functionName\",functionName,\"args\",args,\"RESULT:\",newValue)\r\n        }else{\r\n          newValue = await contracts[contractName][functionName]()\r\n        }\r\n        if(formatter && typeof formatter == \"function\"){\r\n          newValue = formatter(newValue)\r\n        }\r\n        //console.log(\"GOT VALUE\",newValue)\r\n        if(newValue!=value){\r\n          setValue(newValue)\r\n        }\r\n      }catch(e){\r\n        console.log(e)\r\n      }\r\n    }\r\n  },adjustPollTime)\r\n\r\n  return value;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}