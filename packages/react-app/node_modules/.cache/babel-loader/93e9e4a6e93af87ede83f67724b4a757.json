{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { notification } from 'antd';\nimport Notify from 'bnc-notify';\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider != \"undefined\") {\n    return async tx => {\n      let signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: \"17422c49-c723-41e7-85dd-950f5831ef92\",\n        networkId: network.chainId,\n        //darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          console.log(\"HANDLE TX\", txInformation);\n        }\n      };\n      const notify = Notify(options);\n      let etherscanNetwork = \"\";\n\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      const etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n\n      try {\n        let result;\n\n        if (tx instanceof Promise) {\n          console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice ? gasPrice : ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n\n          console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n\n        console.log(\"RESULT:\", result);\n        console.log(\"Notify\", notify); //if it is a valid Notify.js network, use that, if not, just send a default notification\n\n        if ([1, 3, 4, 5, 42].indexOf(network.chainId) >= 0) {\n          const {\n            emitter\n          } = notify.hash(result.hash);\n          emitter.on('all', transaction => {\n            return {\n              onclick: () => window.open((etherscan ? etherscan : etherscanTxUrl) + transaction.hash)\n            };\n          });\n        } else {\n          notification['info']({\n            message: 'Local Transaction Sent',\n            description: result.hash,\n            placement: \"bottomRight\"\n          });\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification['error']({\n          message: 'Transaction Error',\n          description: e.message\n        });\n      }\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/chris/Documents/Workspace/xanadu-contracts/scaffold-eth/packages/react-app/src/helpers/Transactor.js"],"names":["ethers","notification","Notify","Transactor","provider","gasPrice","etherscan","tx","signer","getSigner","network","getNetwork","console","log","options","dappId","networkId","chainId","transactionHandler","txInformation","notify","etherscanNetwork","name","etherscanTxUrl","result","Promise","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","hash","on","transaction","onclick","window","open","message","description","placement","e"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport { notification } from 'antd';\r\n\r\nimport Notify from 'bnc-notify'\r\n\r\nexport default function Transactor(provider,gasPrice,etherscan) {\r\n  if(typeof provider != \"undefined\"){\r\n    return async (tx) => {\r\n      let signer = provider.getSigner()\r\n      const network = await provider.getNetwork()\r\n      console.log(\"network\",network)\r\n      const options = {\r\n        dappId: \"17422c49-c723-41e7-85dd-950f5831ef92\",\r\n        networkId: network.chainId,\r\n        //darkMode: Boolean, // (default: false)\r\n        transactionHandler: (txInformation)=>{\r\n          console.log(\"HANDLE TX\",txInformation)\r\n        },\r\n      }\r\n      const notify = Notify(options)\r\n\r\n      let etherscanNetwork = \"\"\r\n      if(network.name && network.chainId > 1){\r\n        etherscanNetwork = network.name+\".\"\r\n      }\r\n\r\n      const etherscanTxUrl = \"https://\"+etherscanNetwork+\"etherscan.io/tx/\"\r\n\r\n      try{\r\n        let result\r\n        if(tx instanceof Promise){\r\n          console.log(\"AWAITING TX\",tx)\r\n          result = await tx\r\n        }else{\r\n\r\n          if(!tx.gasPrice){\r\n            tx.gasPrice = gasPrice ? gasPrice : ethers.utils.parseUnits(\"4.1\",\"gwei\")\r\n          }\r\n          if(!tx.gasLimit){\r\n            tx.gasLimit = ethers.utils.hexlify(120000)\r\n          }\r\n          console.log(\"RUNNING TX\",tx)\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        console.log(\"RESULT:\",result)\r\n        console.log(\"Notify\",notify)\r\n\r\n        //if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if([1,3,4,5,42].indexOf(network.chainId)>=0){\r\n          const { emitter } = notify.hash(result.hash)\r\n          emitter.on('all', (transaction) => {\r\n            return {\r\n              onclick: () =>\r\n              window.open((etherscan?etherscan:etherscanTxUrl)+transaction.hash),\r\n            }\r\n          })\r\n        }else{\r\n          notification['info']({\r\n            message: 'Local Transaction Sent',\r\n            description: result.hash,\r\n            placement:\"bottomRight\"\r\n          });\r\n        }\r\n\r\n        return result\r\n\r\n      }catch(e){\r\n        console.log(e)\r\n        console.log(\"Transaction Error:\",e.message)\r\n        notification['error']({\r\n          message: 'Transaction Error',\r\n          description: e.message\r\n        });\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}